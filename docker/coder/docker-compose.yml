services:
  coder:
    # This MUST be stable for our documentation and
    # other automations.
    image: ghcr.io/coder/coder:v2.25.2
    container_name: coder
    ports:
      - "7080:7080"
    restart: unless-stopped
    environment:
      CODER_PG_CONNECTION_URL: "postgresql://${POSTGRES_USER:-username}:${POSTGRES_PASSWORD:-password}@database/${POSTGRES_DB:-coder}?sslmode=disable"
      CODER_HTTP_ADDRESS: "0.0.0.0:7080"
      # You'll need to set CODER_ACCESS_URL to an IP or domain
      # that workspaces can reach. This cannot be localhost
      # or 127.0.0.1 for non-Docker templates!
      CODER_ACCESS_URL: "http://xxx.xxx.xxx.xxx:7080"
      # allow admin to open all user containers
      CODER_DANGEROUS_ALLOW_PATH_APP_SITE_OWNER_ACCESS: true
      # for GitHub Auth
      CODER_OAUTH2_GITHUB_ALLOW_SIGNUPS: true
      CODER_OAUTH2_GITHUB_ALLOWED_ORGS: "OCSB-ICS3UV-2025"
      CODER_OAUTH2_GITHUB_CLIENT_ID: "Ov23liZnORCTG2l4TYU8"
      CODER_OAUTH2_GITHUB_CLIENT_SECRET: "5c57d39a8bf79a12182786e8bfb940830cf100bc"
      # remove GitHub auth
      CODER_OAUTH2_GITHUB_DEFAULT_PROVIDER_ENABLE: true
      # remove email login
      CODER_DISABLE_PASSWORD_AUTH: false
      
    # If the coder user does not have write permissions on
    # the docker socket, you can uncomment the following
    # lines and set the group ID to one that has write
    # permissions on the docker socket.
    group_add:
      - "989" # docker group on host
    volumes:
      # By mounting the Docker socket, the coder service can create and manage other Docker containers (in this case, user workspaces) directly from within its own container.
      - /var/run/docker.sock:/var/run/docker.sock
      # Run "docker volume rm coder_coder_home" to reset the dev tunnel url (https://abc.xyz.try.coder.app).
      # This volume is not required in a production environment - you may safely remove it.
      # Coder can recreate all the files it needs on restart.
      # place the mounted docker volume in the directory for this container
      - /root/containers/coder/coder_data:/home/coder
      #- coder_home:/home/coder
    depends_on:
      database:
        condition: service_healthy
  database:
    # Minimum supported version is 13.
    # More versions here: https://hub.docker.com/_/postgres
    image: "postgres:17"
    container_name: postgres
    # Uncomment the next two lines to allow connections to the database from outside the server.
    #ports:
    #  - "5432:5432"
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-username} # The PostgreSQL user (useful to connect to the database)
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password} # The PostgreSQL password (useful to connect to the database)
      POSTGRES_DB: ${POSTGRES_DB:-coder} # The PostgreSQL default database (automatically created at first launch)
    volumes:
      -  /root/containers/coder/postgres_data:/var/lib/postgresql/data
      #- coder_data:/var/lib/postgresql/data # Use "docker volume rm coder_coder_data" to reset Coder
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-username} -d ${POSTGRES_DB:-coder}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
#volumes:
#  coder_data:
#  coder_home:
